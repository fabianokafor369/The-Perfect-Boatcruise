# -*- coding: utf-8 -*-
"""Final_assignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/143dsQh8YXRQ18Q4r9rkDVNjGD0oaeUgj
"""

import numpy as np
import names
import random
import cvxpy as cp
import numpy.linalg as nl

#Creating the random data
naames ,aages, weight, gender, bid ,kids , celeb = [],[], [], [], [],[],[]

for i in range(600):
    naames.append(names.get_full_name())
    aages.append(random.randint(18, 80))
    weight.append(random.randint(40, 200))
    gender.append(random.randint(0, 1))
    t = random.randint(0, 4)
    kids.append(t)
    celeb.append(random.randint(0, 1))
    if t > 2:
        bid.append(random.randint(8000, 14000))
    else:
        bid.append(random.randint(4000, 10000))

naames = np.array(naames)
aages = np.array(aages)
weight = np.array(weight)
gender = np.array(gender)
bid = np.array(bid)
kids = np.array(kids)
celeb = np.array(celeb)

holder= []

for i in range(600):
    holder.append([naames[i], aages[i], weight[i], gender[i], bid[i], kids[i], celeb[i]])

#Applying the Basic Optimization Solution
import math

X = cp.Variable(len(weight), boolean = True, integer = True)
cash = bid.T*X

constraints = [weight.T*X <= 1000, kids.T*X <= 50, celeb.T*X >= 10]
prob = cp.Problem(cp.Maximize(cash), constraints)
result = prob.solve()

indices = []

for i in range(600):
    if round((X.value[i]),5) >= 1.0:
        indices.append(i)

solution = np.array([holder[i] for i in indices])

print(["Name", "Age", "Weight", "Gender", "Bid", "Kids", "Celebrity"])
print(solution)

totalkids, totalweight ,totalc ,totalcash = 0,0,0,0
nweight = []
nbid = []
for i in solution:
    totalkids += int(i[5])
    totalweight += int(i[2])
    totalcash += int(i[4])
    totalc += int(i[-1])
    nweight.append(i[2])
    nbid.append(i[4])
print(len(solution), "people were selected with a total weight of ", totalweight, "and a total of", totalkids, " kids and", totalc ,"celebrities")
print("Your total revenue is ", totalcash)

#Applying the Weighted Solution for multi-objective optimization
import sklearn.preprocessing as sk
import math

X = cp.Variable(len(weight), boolean = True, integer = True)

cash = sk.scale(bid).T*X
popularity = sk.scale(celeb).T*X
damage = sk.scale(kids).T*X

constraints = [weight.T*X <= 1000]
prob = cp.Problem(cp.Maximize(0.6*cash + 0.2*popularity -0.2*damage), constraints)
result = prob.solve()

indices = []

for i in range(600):
    if round((X.value[i]),5) >= 1.0:
        indices.append(i)

solution = np.array([holder[i] for i in indices])

print(["Name", "Age", "Weight", "Gender", "Bid", "Kids", "Celebrity"])
print(solution)

totalkids, totalweight ,totalc ,totalcash = 0,0,0,0
nweight = []
nbid = []
for i in solution:
    totalkids += int(i[5])
    totalweight += int(i[2])
    totalcash += int(i[4])
    totalc += int(i[-1])
    nweight.append(i[2])
    nbid.append(i[4])
print(len(solution), "people were selected with a total weight of ", totalweight, "and a total of", totalkids, " kids and", totalc ,"celebrities")
print("Your total revenue is ", totalcash)

#Applying the combined optimization technique
import sklearn.preprocessing as sk
import math

X = cp.Variable(len(weight), boolean = True, integer = True)

cash = sk.scale(bid).T*X
popularity = sk.scale(celeb).T*X
damage = sk.scale(kids).T*X

constraints = [weight.T*X <= 1000, sk.scale(kids).T*X <= (50-np.mean(kids))/nl.norm(kids, 2), sk.scale(celeb).T*X >= (10-np.mean(celeb))/nl.norm(celeb, 2)]
prob = cp.Problem(cp.Maximize(0.6*cash + 0.2*popularity -0.2*damage), constraints)
result = prob.solve()

indices = []

for i in range(600):
    if round((X.value[i]),5) >= 1.0:
        indices.append(i)

solution = np.array([holder[i] for i in indices])

print(["Name", "Age", "Weight", "Gender", "Bid", "Kids", "Celebrity"])
print(solution)

totalkids, totalweight ,totalc ,totalcash = 0,0,0,0
nweight = []
nbid = []
for i in solution:
    totalkids += int(i[5])
    totalweight += int(i[2])
    totalcash += int(i[4])
    totalc += int(i[-1])
    nweight.append(i[2])
    nbid.append(i[4])
print(len(solution), "people were selected with a total weight of ", totalweight, "and a total of", totalkids, " kids and", totalc ,"celebrities")
print("Your total revenue is ", totalcash)